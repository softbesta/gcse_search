import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';

// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
  key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, "\n"),
  scopes: [
    'https://www.googleapis.com/auth/spreadsheets',
  ],
});
const doc = new GoogleSpreadsheet('1kc2mOR0nH8ZIa2aF5aVSUWDQ93Vb1mrkmI_TWbzU4e4', serviceAccountAuth);

export default async function handler(req, res) {
  const { body: items } = req
  try {
    console.log({ items })
  } catch (error) {
    res.status(500).json(error);
  }
}

async function test_handler(req, res) {
  try {
    console.log('*** 111')

    await doc.loadInfo(); // loads document properties and worksheets
    console.log(doc.title);
    // await doc.updateProperties({ title: 'softbestaproject1' });

    console.log('*** 222')

    const sheet1 = doc.sheetsByIndex[4]
    const rows = await sheet1.getRows()

    console.log(rows[0].get('name'))

    // rows[0].set('email') = 'my customization1'
    rows[1].assign({ name: 'Sundar Pichai', email: 'sundar@google.com' })
    await rows[1].save()

    // const sheet = await doc.addSheet({ headerValues: ['name', 'email'] })

    // console.log('*** 333')

    // const row1 = await sheet.addRow({ name: 'Larry Page', email: 'larry@google.com' })

    // console.log('*** 444')

    // const row2 = await sheet.addRows([
    //   { name: 'Sergey Brin', email: 'sergey@google.com' },
    //   { name: 'Eric Schmidt', email: 'eric@google.com' },
    // ])

    // console.log('*** 555')

    // const rows = await sheet.getRows()

    // console.log('*** 666')

    // console.log('row1 : ', row1)
    // console.log('rows : ', rows.length)
    // console.log(rows[0].get('name'))

    res.status(200).json({ data: 'very good' })
  } catch (error) {
    res.status(500).json(error);
  }
}
